{"version":3,"sources":["/Users/gziolo/PhpstormProjects/gutenberg/packages/a11y/src/addContainer.js","/Users/gziolo/PhpstormProjects/gutenberg/packages/a11y/src/clear.js","/Users/gziolo/PhpstormProjects/gutenberg/packages/dom-ready/src/index.js","/Users/gziolo/PhpstormProjects/gutenberg/packages/a11y/src/filterMessage.js","/Users/gziolo/PhpstormProjects/gutenberg/packages/a11y/src/index.js","filter-cities-vanilla.js","index.js"],"names":["addContainer","ariaLive","container","document","createElement","id","className","setAttribute","querySelector","appendChild","clear","regions","querySelectorAll","i","length","textContent","domReady","callback","readyState","addEventListener","filterMessage","previousMessage","message","replace","setup","containerPolite","getElementById","containerAssertive","speak","speakExample","selectCity","showResults","people","name","city","filterCities","e","filter","WPA11ySpeakText","successMessage1","window","filterDefaults","restUrl","showPost","selectCategory","filterCategories","preventDefault","whichCity","value","results","who","map","match","join","trim","innerHTML","whichCategory","fetch","then","resp","json","data","console","log","selectedCategory","posts","category","categories","title","rendered","successMessage2","catch","error"],"mappings":";AAmCeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA5Bf,IAAMA,EAAe,SAAUC,GAC9BA,EAAWA,GAAY,SAEjBC,IAAAA,EAAYC,SAASC,cAAe,OAsBnCF,OArBPA,EAAUG,GAAK,cAAgBJ,EAC/BC,EAAUI,UAAY,oBAEtBJ,EAAUK,aAAc,QACvB,iNAYDL,EAAUK,aAAc,YAAaN,GACrCC,EAAUK,aAAc,gBAAiB,kBACzCL,EAAUK,aAAc,cAAe,QAEvCJ,SAASK,cAAe,QAASC,YAAaP,GACvCA,GAGOF,EAAAA,EAAAA,QAAAA,QAAAA;;ACzBAU,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAPf,IAAMA,EAAQ,WAEP,IADAC,IAAAA,EAAUR,SAASS,iBAAkB,sBACjCC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IACpCF,EAASE,GAAIE,YAAc,IAIdL,EAAAA,EAAAA,QAAAA,QAAAA;;ACSAM,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAZf,IAAMA,EAAW,SAAUC,GAEzBd,GAAwB,aAAxBA,SAASe,YACe,gBAAxBf,SAASe,WAEFD,OAAAA,IAIRd,SAASgB,iBAAkB,mBAAoBF,IAGjCD,EAAAA,EAAAA,QAAAA,QAAAA;;ACSAI,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA5Bf,IAAIC,EAAkB,GAShBD,EAAgB,SAAUE,GAgBxBA,OARPA,EAAUA,EAAQC,QAAS,YAAa,KAEnCF,IAAoBC,IACxBA,GAAW,KAGZD,EAAkBC,EAEXA,GAGOF,EAAAA,EAAAA,QAAAA,QAAAA;;ACIR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,WAAA,EAhCP,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,oBA6BO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxBA,IAAMI,EAAQ,WAChBC,IAAAA,EAAkBtB,SAASuB,eAAgB,qBAC3CC,EAAqBxB,SAASuB,eAAgB,wBAEzB,OAApBD,IACJA,GAAkBzB,EAAc,EAAA,SAAA,WAEL,OAAvB2B,IACJA,GAAqB3B,EAAc,EAAA,SAAA,eAgB9B,QAAA,MAAA,GATPgB,EAAUQ,EAAAA,SAAAA,GASH,IAAMI,EAAQ,SAAUN,EAASrB,IAEvCS,EAAAA,EAAAA,WAEAY,GAAUF,EAAeE,EAAAA,SAAAA,GAEnBG,IAAAA,EAAkBtB,SAASuB,eAAgB,qBAC3CC,EAAqBxB,SAASuB,eAAgB,wBAE/CC,GAAsB,cAAgB1B,EAC1C0B,EAAmBZ,YAAcO,EACtBG,IACXA,EAAgBV,YAAcO,IAZzB,QAAA,MAAA;;ACgGQO,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA/Hf,IAAA,EAAA,QAAA,mBAKMA,EAAe,WAKf,GAHc1B,SAASuB,eAAgB,iBAGvC,CAKCI,IAAAA,EAAa3B,SAASuB,eAAgB,eAGtCK,EAAc5B,SAASuB,eAAgB,gBAGvCM,EAAS,CACd,CAAEC,KAAM,QAASC,KAAM,YACvB,CAAED,KAAM,OAAQC,KAAM,YACtB,CAAED,KAAM,OAAQC,KAAM,YACtB,CAAED,KAAM,QAASC,KAAM,YACvB,CAAED,KAAM,UAAWC,KAAM,YACzB,CAAED,KAAM,QAASC,KAAM,YACvB,CAAED,KAAM,SAAUC,KAAM,UACxB,CAAED,KAAM,OAAQC,KAAM,UACtB,CAAED,KAAM,QAASC,KAAM,WACvB,CAAED,KAAM,OAAQC,KAAM,WACtB,CAAED,KAAM,QAASC,KAAM,WACvB,CAAED,KAAM,SAAUC,KAAM,YAqCzBJ,EAAWX,iBAAkB,SAfpBgB,SAAcC,GAEtBC,EAAQD,IAGDE,EAAAA,EAAAA,OAAAA,gBAAgBC,mBAaxBC,OAAOrB,iBAAkB,OAThBsB,SAAgBL,GAExBC,EAAQD,KAeHM,IAAAA,EAAUJ,gBAAgBI,QAG1BC,EAAWxC,SAASuB,eAAgB,cAGpCkB,EAAiBzC,SAASuB,eAAgB,mBAkChDkB,EAAezB,iBAAkB,SAAU0B,GAG3CL,OAAOrB,iBAAkB,OAAQ0B,GAvFxBR,SAAAA,EAAQD,GAEhBA,EAAEU,iBAGIC,IAAAA,EAAYjB,EAAWkB,MAMzBC,EAHajB,EAAOK,OAAQ,SAAAa,GAAQA,OAAAA,EAAIhB,MAAQa,IAG7BI,IAAK,SAAAC,GAAgBA,MAAAA,OAAAA,OAAAA,EAAMnB,KAAjB,WAA8BoB,KAAK,IAAIC,OAGxEvB,EAAYwB,UAAYN,EAuChBJ,SAAAA,EAAkBT,GAE1BA,EAAEU,iBAGIU,IAAAA,EAAgBZ,EAAeI,MAGrCS,MAAOf,GACLgB,KAAM,SAACC,GAASA,OAAAA,EAAKC,SACrBF,KAAM,SAAUG,GACjBC,QAAQC,IAAKF,GAGPG,IAGFC,EAHqBJ,EAAKxB,OAAQ,SAAA6B,GAAaA,OAAAA,EAASC,YAAcX,IAG7CL,IAAK,SAAAC,GAAgBA,MAAAA,OAAAA,OAAAA,EAAMgB,MAAMC,SAAvB,WAAwChB,KAAK,IAAIC,OAGxFX,EAASY,UAAYU,GAGd3B,EAAAA,EAAAA,OAAAA,gBAAgBgC,gBAAiB,eAExCC,MAAO,SAAUC,GACjBV,QAAQC,IAAIS,OAWA3C,EAAAA,EAAAA,QAAAA,QAAAA;;AC9Hf,aAFA,IAAA,EAAA,EAAA,QAAA,6BAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,EAAA,EAAA","file":"index.map","sourceRoot":"../assets/scripts","sourcesContent":["/**\n * Build the live regions markup.\n *\n * @param {string} ariaLive Optional. Value for the 'aria-live' attribute, default 'polite'.\n *\n * @return {Object} $container The ARIA live region jQuery object.\n */\nconst addContainer = function( ariaLive ) {\n\tariaLive = ariaLive || 'polite';\n\n\tconst container = document.createElement( 'div' );\n\tcontainer.id = 'a11y-speak-' + ariaLive;\n\tcontainer.className = 'a11y-speak-region';\n\n\tcontainer.setAttribute( 'style', (\n\t\t'position: absolute;' +\n\t\t'margin: -1px;' +\n\t\t'padding: 0;' +\n\t\t'height: 1px;' +\n\t\t'width: 1px;' +\n\t\t'overflow: hidden;' +\n\t\t'clip: rect(1px, 1px, 1px, 1px);' +\n\t\t'-webkit-clip-path: inset(50%);' +\n\t\t'clip-path: inset(50%);' +\n\t\t'border: 0;' +\n\t\t'word-wrap: normal !important;'\n\t) );\n\tcontainer.setAttribute( 'aria-live', ariaLive );\n\tcontainer.setAttribute( 'aria-relevant', 'additions text' );\n\tcontainer.setAttribute( 'aria-atomic', 'true' );\n\n\tdocument.querySelector( 'body' ).appendChild( container );\n\treturn container;\n};\n\nexport default addContainer;\n","/**\n * Clear the a11y-speak-region elements.\n */\nconst clear = function() {\n\tconst regions = document.querySelectorAll( '.a11y-speak-region' );\n\tfor ( let i = 0; i < regions.length; i++ ) {\n\t\tregions[ i ].textContent = '';\n\t}\n};\n\nexport default clear;\n","/**\n * Specify a function to execute when the DOM is fully loaded.\n *\n * @param {Function} callback A function to execute after the DOM is ready.\n *\n * @return {void}\n */\nconst domReady = function( callback ) {\n\tif (\n\t\tdocument.readyState === 'complete' || // DOMContentLoaded + Images/Styles/etc loaded, so we call directly.\n\t\tdocument.readyState === 'interactive' // DOMContentLoaded fires at this point, so we call directly.\n\t) {\n\t\treturn callback();\n\t}\n\n\t// DOMContentLoaded has not fired yet, delay callback until then.\n\tdocument.addEventListener( 'DOMContentLoaded', callback );\n};\n\nexport default domReady;\n","let previousMessage = '';\n\n/**\n * Filter the message to be announced to the screenreader.\n *\n * @param {string} message The message to be announced.\n *\n * @return {string} The filtered message.\n */\nconst filterMessage = function( message ) {\n\t/*\n\t * Strip HTML tags (if any) from the message string. Ideally, messages should\n\t * be simple strings, carefully crafted for specific use with A11ySpeak.\n\t * When re-using already existing strings this will ensure simple HTML to be\n\t * stripped out and replaced with a space. Browsers will collapse multiple\n\t * spaces natively.\n\t */\n\tmessage = message.replace( /<[^<>]+>/g, ' ' );\n\n\tif ( previousMessage === message ) {\n\t\tmessage += '\\u00A0';\n\t}\n\n\tpreviousMessage = message;\n\n\treturn message;\n};\n\nexport default filterMessage;\n","import addContainer from './addContainer';\nimport clear from './clear';\nimport domReady from '@wordpress/dom-ready';\nimport filterMessage from './filterMessage';\n\n/**\n * Create the live regions.\n */\nexport const setup = function() {\n\tlet containerPolite = document.getElementById( 'a11y-speak-polite' );\n\tlet containerAssertive = document.getElementById( 'a11y-speak-assertive' );\n\n\tif ( containerPolite === null ) {\n\t\tcontainerPolite = addContainer( 'polite' );\n\t}\n\tif ( containerAssertive === null ) {\n\t\tcontainerAssertive = addContainer( 'assertive' );\n\t}\n};\n\n/**\n * Run setup on domReady.\n */\ndomReady( setup );\n\n/**\n * Update the ARIA live notification area text node.\n *\n * @param {string} message  The message to be announced by Assistive Technologies.\n * @param {string} ariaLive Optional. The politeness level for aria-live. Possible values:\n *                          polite or assertive. Default polite.\n */\nexport const speak = function( message, ariaLive ) {\n\t// Clear previous messages to allow repeated strings being read out.\n\tclear();\n\n\tmessage = filterMessage( message );\n\n\tconst containerPolite = document.getElementById( 'a11y-speak-polite' );\n\tconst containerAssertive = document.getElementById( 'a11y-speak-assertive' );\n\n\tif ( containerAssertive && 'assertive' === ariaLive ) {\n\t\tcontainerAssertive.textContent = message;\n\t} else if ( containerPolite ) {\n\t\tcontainerPolite.textContent = message;\n\t}\n};\n","// Import vanilla package for a11y speak.\nimport { speak } from '@wordpress/a11y';\n\n/*\n * Filter cities.\n */\nconst speakExample = () => {\n\t// Filter form.\n\tconst filterForm = document.getElementById( 'filter-cities' );\n\n\t// Bail if we do not have the form.\n\tif ( ! filterForm ) {\n\t\treturn;\n\t}\n\n\t// Select city.\n\tconst selectCity = document.getElementById( 'select-city' );\n\n\t// Get result element and default info.\n\tconst showResults = document.getElementById( 'show-results' );\n\n\t// List people.\n\tconst people = [\n\t\t{ name: 'Vellu', city: 'Kuorinka' },\n\t\t{ name: 'Sami', city: 'Kuorinka' },\n\t\t{ name: 'Esko', city: 'Kuorinka' },\n\t\t{ name: 'Irwin', city: 'Helsinki' },\n\t\t{ name: 'Luciref', city: 'Helsinki' },\n\t\t{ name: 'Matti', city: 'Helsinki' },\n\t\t{ name: 'Reetta', city: 'Kuopio' },\n\t\t{ name: 'Ossi', city: 'Kuopio' },\n\t\t{ name: 'Jussi', city: 'Joensuu' },\n\t\t{ name: 'Luke', city: 'Joensuu' },\n\t\t{ name: 'Hannu', city: 'Tampere' },\n\t\t{ name: 'Hilkka', city: 'Tampere' },\n\t  ];\n\n\t// Filter contacts via form input.\n\tfunction filter( e ) {\n\t\t// Don't reload the page.\n\t\te.preventDefault();\n\n\t\t// Get city value.\n\t\tconst whichCity = selectCity.value;\n\n\t\t// Filter only selected people based on city.\n\t\tconst selected = people.filter( who => (who.city == whichCity ) );\n\n\t\t// Loop them in a list.\n\t\tlet results = selected.map( match => `<li>${match.name}</li>`).join('').trim();\n\n\t\t// Populate filtered people inside the list.\n\t\tshowResults.innerHTML = results;\n\t}\n\n\t// Filter contacts via form input.\n\tfunction filterCities( e ) {\n\t\t// Filter cities.\n\t\tfilter( e );\n\n\t\t// Announce filtering result to screen readers. Default is \"polite\".\n\t\tspeak( WPA11ySpeakText.successMessage1 );\n\t}\n\n\t// Filter contacts via form input.\n\tfunction filterDefaults( e ) {\n\t\t// Filter cities.\n\t\tfilter( e );\n\t}\n\n\t// Listen when city selection have been changed.\n\tselectCity.addEventListener( 'change', filterCities );\n\n\t// Populate defaults on page load.\n\twindow.addEventListener( 'load', filterDefaults );\n\n\t/*\n\t * Fetch posts from REST API.\n\t * @link: https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\n\t */\n\n\t// REST URL.\n\tconst restUrl = WPA11ySpeakText.restUrl;\n\n\t// Set posts element.\n\tconst showPost = document.getElementById( 'show-posts' );\n\n\t// Select category from the form.\n\tconst selectCategory = document.getElementById( 'select-category' );\n\n\t// Filter categories function.\n\tfunction filterCategories( e ) {\n\t\t// Don't reload the page.\n\t\te.preventDefault();\n\n\t\t// Get category ID.\n\t\tconst whichCategory = selectCategory.value;\n\n\t\t// Fetch posts.\n\t\tfetch( restUrl )\n\t\t\t.then( (resp) => resp.json() )\n\t\t\t.then( function( data ) {\n\t\t\tconsole.log( data );\n\n\t\t\t// Filter only selected category posts.\n\t\t\tconst selectedCategory = data.filter( category => (category.categories == whichCategory ) );\n\n\t\t\t// Loop them in a list.\n\t\t\tlet posts = selectedCategory.map( match => `<li>${match.title.rendered}</li>`).join('').trim();\n\n\t\t\t// Populate filtered posts inside the list.\n\t\t\tshowPost.innerHTML = posts;\n\n\t\t\t// Announce filtering result to screen readers.\n\t\t\tspeak( WPA11ySpeakText.successMessage2, 'assertive' );\n\t\t})\n\t\t.catch( function( error ) {\n\t\t\tconsole.log(error);\n\t\t})\n\t}\n\n\t// Listen when city selection have been changed.\n\tselectCategory.addEventListener( 'change', filterCategories );\n\n\t// Populate defaults on page load.\n\twindow.addEventListener( 'load', filterCategories );\n};\n\nexport default speakExample;\n","import speakExample from './filter-cities-vanilla/';\n\nspeakExample();\n"]}